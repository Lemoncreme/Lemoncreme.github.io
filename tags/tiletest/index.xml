<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>tiletest on benpm.github.io</title><link>https://benpm.github.io/tags/tiletest/</link><description>Recent content in tiletest on benpm.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 20 Sep 2020 10:41:59 -0600</lastBuildDate><atom:link href="https://benpm.github.io/tags/tiletest/index.xml" rel="self" type="application/rss+xml"/><item><title>Quadtrees for 2D Games with Moving Elements</title><link>https://benpm.github.io/blog/quadtrees/</link><pubDate>Sun, 20 Sep 2020 10:41:59 -0600</pubDate><guid>https://benpm.github.io/blog/quadtrees/</guid><description>A quadtree is a very useful data structure for performing spatial searches. I am currently using them in Tiletest for collision detection and monster behavior. Quadtrees partition 2D space into quadrants (stored as nodes in a tree), dividing these quadrants into smaller quadrants when they contain more than a certain threshold of elements (shown as dots):
There are a couple uses for this structure, one of the most useful is searching for the nearest element to a given location.</description></item><item><title>Rectangle (AABB) Collisions</title><link>https://benpm.github.io/blog/2d-top-down-collisions-with-rectangles-aabbs/</link><pubDate>Wed, 22 Jul 2020 22:10:40 -0600</pubDate><guid>https://benpm.github.io/blog/2d-top-down-collisions-with-rectangles-aabbs/</guid><description>Axis-aligned bounding boxes (AABBs) are very useful for doing simple collision detection and 2D physics. The basic idea is: loop through the boxes, checking for intersections with each other box. Then, you resolve these intersections by moving the boxes in the direction of the shortest intersection axis. So if the width of the intersection is smaller than its height, like it is here, then the boxes are moved on the x axis:</description></item></channel></rss>