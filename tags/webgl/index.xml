<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>webgl on benpm.github.io</title><link>https://benpm.github.io/tags/webgl/</link><description>Recent content in webgl on benpm.github.io</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Tue, 28 Jul 2020 10:08:45 -0600</lastBuildDate><atom:link href="https://benpm.github.io/tags/webgl/index.xml" rel="self" type="application/rss+xml"/><item><title>Cellular Automata in WebGL: Part 1</title><link>https://benpm.github.io/blog/gol_1/</link><pubDate>Tue, 28 Jul 2020 10:08:45 -0600</pubDate><guid>https://benpm.github.io/blog/gol_1/</guid><description>I&amp;rsquo;ve always been fascinated with cellular automata, like Conway&amp;rsquo;s Game of Life:
The idea that simple rules can produce structured, complex systems is beautiful to me. Of course I&amp;rsquo;m not the only one, Stephen Wolfram really has a thing for em&amp;rsquo; .
Anyways, I wanted a fun way to create and tweak cellular automata rules, so I decided to write a generalized cellular automaton simulator in WebGL . This post is about how it is implemented and what new interesting possibilities await!</description></item></channel></rss>